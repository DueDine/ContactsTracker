<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnalyzeFeedback" xml:space="preserve">
    <value>If you have a suggestion for a new query, please let me know.</value>
  </data>
  <data name="AuthorDiscord" xml:space="preserve">
    <value>Discord: @lamitt</value>
  </data>
  <data name="ButtonDeleteAll" xml:space="preserve">
    <value>Enable Delete at Data Tab</value>
  </data>
  <data name="ButtonDeleteAllAction" xml:space="preserve">
    <value>Delete ALL Active Entries</value>
  </data>
  <data name="ButtonDeleteAllTooltip" xml:space="preserve">
    <value>Show the button to delete all active entries at Data Tab.</value>
  </data>
  <data name="ButtonDeleteAllWarning" xml:space="preserve">
    <value>Are you sure you want to delete ALL? This action is irreversible.</value>
  </data>
  <data name="ButtonQuery" xml:space="preserve">
    <value>Query</value>
  </data>
  <data name="ButtonReset" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="ButtonSelectNo" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="ButtonSelectYes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="CancelIgnore" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CheckboxEnableKeepEntry" xml:space="preserve">
    <value>Keep Incomplete Entry</value>
  </data>
  <data name="CheckboxEnableKeepEntryTooltip" xml:space="preserve">
    <value>Keep record regardless of completion.</value>
  </data>
  <data name="CheckboxEnableLogging" xml:space="preserve">
    <value>Enable Logging</value>
  </data>
  <data name="CheckboxEnableLoggingTooltip" xml:space="preserve">
    <value>Enable to start recording data.</value>
  </data>
  <data name="CheckboxEnableLogParty" xml:space="preserve">
    <value>Enable Log Party</value>
  </data>
  <data name="CheckboxEnableLogPartyClass" xml:space="preserve">
    <value>Log Party Class</value>
  </data>
  <data name="CheckboxEnableLogPartyClassTooltip" xml:space="preserve">
    <value>Also record their class.</value>
  </data>
  <data name="CheckboxEnableLogPartyTooltip" xml:space="preserve">
    <value>Enable to log party members on completion.</value>
  </data>
  <data name="CheckboxEnableRecordRoulette" xml:space="preserve">
    <value>Only Record Duty Roulette</value>
  </data>
  <data name="CheckboxEnableRecordRouletteTooltip" xml:space="preserve">
    <value>Enable to only record duty joined by roulette.</value>
  </data>
  <data name="CheckboxEnableRecordSolo" xml:space="preserve">
    <value>Record Solo</value>
  </data>
  <data name="CheckboxEnableRecordSoloTooltip" xml:space="preserve">
    <value>Enable to record solo duty.</value>
  </data>
  <data name="DataExport" xml:space="preserve">
    <value>Export to CSV</value>
  </data>
  <data name="DataImport" xml:space="preserve">
    <value>Import from CSV</value>
  </data>
  <data name="DataImportFail" xml:space="preserve">
    <value>Failed to import.</value>
  </data>
  <data name="DataImportSuccess" xml:space="preserve">
    <value>Imported successfully.</value>
  </data>
  <data name="DeleteHistoryEntry" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DeleteHistoryEntryCtrl" xml:space="preserve">
    <value>Hold CTRL to Delete.</value>
  </data>
  <data name="DeleteHistoryEntryWarning" xml:space="preserve">
    <value>This action is irreversible.</value>
  </data>
  <data name="DoubleConfirmIgnore" xml:space="preserve">
    <value>Confim Ignore</value>
  </data>
  <data name="DurationOfEntry" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="EntryParty" xml:space="preserve">
    <value>Party Members</value>
  </data>
  <data name="EntryTimeFromTo" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="IgnoreCurrentEntry" xml:space="preserve">
    <value>Ignore</value>
  </data>
  <data name="IsEntryCompleted" xml:space="preserve">
    <value>Completed?</value>
  </data>
  <data name="NotActiveButHaveHistory" xml:space="preserve">
    <value>No Active Log. Display Last Entry Instead.</value>
  </data>
  <data name="NotAnyRecord" xml:space="preserve">
    <value>No record yet.</value>
  </data>
  <data name="OpenAnalyzeWindow" xml:space="preserve">
    <value>Open Analyze</value>
  </data>
  <data name="PlayerJob" xml:space="preserve">
    <value>Job</value>
  </data>
  <data name="PluginAboutInfo" xml:space="preserve">
    <value>This plugin is in early development. Please report any bugs or suggestions to the developer.</value>
  </data>
  <data name="PluginHowToFeedback" xml:space="preserve">
    <value>You can ping me at the Dalamud Discord server. Or open an issue at the GitHub repository.</value>
  </data>
  <data name="QueryInProcess" xml:space="preserve">
    <value>Processing...</value>
  </data>
  <data name="QueryNoResult" xml:space="preserve">
    <value>No data available.</value>
  </data>
  <data name="QueryRouletteFrequency" xml:space="preserve">
    <value>Frequency of Maps of each Roulette</value>
  </data>
  <data name="QuerySpentTime" xml:space="preserve">
    <value>How much time for each roulette</value>
  </data>
  <data name="QueryTopX" xml:space="preserve">
    <value>Top X pair of Roulette and Map</value>
  </data>
  <data name="RouletteName" xml:space="preserve">
    <value>Join via</value>
  </data>
  <data name="SettingTabAdvance" xml:space="preserve">
    <value>Advanced</value>
  </data>
  <data name="SettingTabData" xml:space="preserve">
    <value>Data</value>
  </data>
  <data name="SettingTabGeneral" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="TabNameAbout" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="TabNameActive" xml:space="preserve">
    <value>Active</value>
  </data>
  <data name="TabNameHistory" xml:space="preserve">
    <value>History</value>
  </data>
  <data name="TabNameSetting" xml:space="preserve">
    <value>Setting</value>
  </data>
  <data name="TerritoryName" xml:space="preserve">
    <value>Place</value>
  </data>
  <data name="TextNo" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="TextYes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="WarningWhenDisableLogging" xml:space="preserve">
    <value>Logging Disabled. Read-Only Mode.</value>
  </data>
  <data name="WhenLogging" xml:space="preserve">
    <value>Currently Logging</value>
  </data>
</root>